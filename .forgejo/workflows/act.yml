name: act
on:
  push:
    branches:
      - 'main'
  pull_request:

env:
  GOPROXY: https://goproxy.io,direct
  GOPATH: /go_path
  GOCACHE: /go_cache

jobs:
  unit:
    runs-on: docker
    if: vars.ROLE == 'forgejo-coding'
    container:
      image: 'code.forgejo.org/oci/node:22-bookworm'
    steps:
      - name: cache go path
        id: cache-go-path
        uses: https://code.forgejo.org/actions/cache@v4
        with:
          path: /go_path
          key: go_path-${{ forge.repository }}-${{ forge.ref_name }}
          restore-keys: |
            go_path-${{ forge.repository }}-
            go_path-
      - name: cache go cache
        id: cache-go-cache
        uses: https://code.forgejo.org/actions/cache@v4
        with:
          path: /go_cache
          key: go_cache-${{ forge.repository }}-${{ forge.ref_name }}
          restore-keys: |
            go_cache-${{ forge.repository }}-
            go_cache-

      - uses: https://code.forgejo.org/actions/checkout@v4

      - uses: https://code.forgejo.org/actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: validate go version
        run: |
          set -ex
          toolchain=$(grep -oP '(?<=toolchain ).+' go.mod)
          version=$(go version | cut -d' ' -f3)
          if dpkg --compare-versions ${version#go} lt ${toolchain#go}; then
            echo "go version too low: $toolchain >= $version"
            exit 1
          fi

      - name: unit test
        run: |
          go test -short ./act/container
          go test ./act/artifactcache/... ./act/workflowpattern/... ./act/filecollector/... ./act/common/... ./act/jobparser ./act/model ./act/exprparser ./act/schema

  integration:
    runs-on: lxc-bookworm
    if: vars.ROLE == 'forgejo-coding'
    needs: [unit]
    steps:
      - uses: https://code.forgejo.org/actions/checkout@v4

      - uses: https://code.forgejo.org/actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: apt install docker.io
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -qq
          apt-get -q install -qq -y docker.io

      - name: integration test
        run: |
          go test ./act/container
          go test -timeout 30m ./act/runner/...
